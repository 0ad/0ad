From https://github.com/CxxTest/cxxtest/pull/105 (excluding some files we do not use)
---
diff --git a/cxxtest/Gui.h b/cxxtest/Gui.h
index 253ed62..d3609b1 100644
--- a/cxxtest/Gui.h
+++ b/cxxtest/Gui.h
@@ -27,14 +27,14 @@ class GuiListener : public TestListener
     GuiListener() : _state(GREEN_BAR) {}
     virtual ~GuiListener() {}
 
-    virtual void runGui(int &argc, char **argv, TestListener &listener)
+    virtual void runGui(TestListener &listener)
     {
-        enterGui(argc, argv);
+        enterGui();
         TestRunner::runAllTests(listener);
         leaveGui();
     }
 
-    virtual void enterGui(int & /*argc*/, char ** /*argv*/) {}
+    virtual void enterGui() {}
     virtual void leaveGui() {}
 
     //
@@ -171,25 +171,30 @@ class GuiListener : public TestListener
 template<class GuiT, class TuiT>
 class GuiTuiRunner : public TeeListener
 {
-    int* _argc;
-    char **_argv;
     GuiT _gui;
     TuiT _tui;
 
 public:
-    GuiTuiRunner() : _argc(0), _argv(0) {}
+    GuiTuiRunner() {}
 
-    void process_commandline(int& argc, char** argv)
+    bool process_commandline_args(int& i, int& argc, char* argv[])
     {
-        _argc = &argc;
-        _argv = argv;
-        setFirst(_gui);
-        setSecond(_tui);
+        if (i == 0) // Init
+        {
+            setFirst(_gui);
+            setSecond(_tui);
+        }
+        return _gui.process_commandline_args(i, argc, argv);
+    }
+
+    void print_help(const char* name)
+    {
+        _gui.print_help(name);
     }
 
     int run()
     {
-        _gui.runGui(*_argc, _argv, *this);
+        _gui.runGui(*this);
         return tracker().failedTests();
     }
 };
diff --git a/cxxtest/TestListener.h b/cxxtest/TestListener.h
index dbc2365..621b501 100644
--- a/cxxtest/TestListener.h
+++ b/cxxtest/TestListener.h
@@ -30,7 +30,8 @@ class TestListener
 public:
     TestListener() {}
     virtual ~TestListener() {}
-    virtual void process_commandline(int& /*argc*/, char** /*argv*/) {}
+    virtual void print_help(const char* /*name*/) {}
+    virtual bool process_commandline_args(int& /*i*/, int& /*argc*/, char* /*argv*/[]) { return false; }
 
     virtual void enterWorld(const WorldDescription & /*desc*/) {}
     virtual void enterSuite(const SuiteDescription & /*desc*/) {}
diff --git a/cxxtest/TestMain.h b/cxxtest/TestMain.h
index c4d14bb..816d27e 100644
--- a/cxxtest/TestMain.h
+++ b/cxxtest/TestMain.h
@@ -33,14 +33,17 @@
 namespace CxxTest
 {
 
-inline void print_help(const char* name)
+template <class TesterT>
+inline void print_help(TesterT& tmp, const char* name)
 {
-    CXXTEST_STD(cerr) << name << " <suitename>" << CXXTEST_STD(endl);
-    CXXTEST_STD(cerr) << name << " <suitename> <testname>" << CXXTEST_STD(endl);
-    CXXTEST_STD(cerr) << name << " -h" << CXXTEST_STD(endl);
-    CXXTEST_STD(cerr) << name << " --help" << CXXTEST_STD(endl);
-    CXXTEST_STD(cerr) << name << " --help-tests" << CXXTEST_STD(endl);
-    CXXTEST_STD(cerr) << name << " -v             Enable tracing output." << CXXTEST_STD(endl);
+    CXXTEST_STD(cerr) << name << " <suitename>\n";
+    CXXTEST_STD(cerr) << name << " <suitename> <testname>\n";
+    CXXTEST_STD(cerr) << name << " -h\n";
+    CXXTEST_STD(cerr) << name << " --help\n";
+    CXXTEST_STD(cerr) << name << " --help-tests\n";
+    CXXTEST_STD(cerr) << name << " -v             Enable tracing output.\n";
+    CXXTEST_STD(cerr) << "Frontend specific options:" << CXXTEST_STD(endl);
+    tmp.print_help(name);
 }
 #endif
 
@@ -54,19 +57,19 @@ int Main(TesterT& tmp, int argc, char* argv[])
 // This is a primitive parser, but I'm not sure what sort of portable
 // parser should be used in cxxtest.
 //
+    int i = 0;
+    tmp.process_commandline_args(i, argc, argv);
 
 #if defined(_CXXTEST_HAVE_STD)
-//
-// Print command-line syntax
-//
-    for (int i = 1; i < argc; i++)
+    bool suiteSpecified = false;
+    for (i = 1; i < argc; i++)
     {
         if ((CXXTEST_STD(strcmp)(argv[i], "-h") == 0) || (CXXTEST_STD(strcmp)(argv[i], "--help") == 0))
         {
-            print_help(argv[0]);
+            print_help(tmp, argv[0]);
             return 0;
         }
-        else if ((CXXTEST_STD(strcmp)(argv[1], "--help-tests") == 0))
+        else if ((CXXTEST_STD(strcmp)(argv[i], "--help-tests") == 0))
         {
             CXXTEST_STD(cout) << "Suite/Test Names" << CXXTEST_STD(endl);
             CXXTEST_STD(cout) << "---------------------------------------------------------------------------" << CXXTEST_STD(endl);
@@ -77,54 +80,53 @@ int Main(TesterT& tmp, int argc, char* argv[])
                 }
             return 0;
         }
-    }
-
-//
-// Process command-line options here.
-//
-    while ((argc > 1) && (argv[1][0] == '-'))
-    {
-        if (CXXTEST_STD(strcmp)(argv[1], "-v") == 0)
+        else if (CXXTEST_STD(strcmp)(argv[i], "-v") == 0)
         {
             tracker().print_tracing = true;
         }
-        else
-        {
-            CXXTEST_STD(cerr) << "ERROR: unknown option '" << argv[1] << "'" << CXXTEST_STD(endl);
-            return -1;
-        }
-        for (int i = 1; i < (argc - 1); i++)
+        else if (argv[i][0] == '-')
         {
-            argv[i] = argv[i + 1];
+            // Increments i if it handles more arguments
+            if (!tmp.process_commandline_args(i, argc, argv))
+            {
+                CXXTEST_STD(cerr) << "ERROR: unknown option '" << argv[i] << "'" << CXXTEST_STD(endl);
+                return -1;
+            }
         }
-        argc--;
-    }
-
-//
-// Run experiments
-//
-    bool status = false;
-    if ((argc == 2) && (argv[1][0] != '-'))
-    {
-        status = leaveOnly(argv[1]);
-        if (!status)
-        {
-            CXXTEST_STD(cerr) << "ERROR: unknown suite '" << argv[1] << "'" << CXXTEST_STD(endl);
-            return -1;
-        }
-    }
-    if ((argc == 3) && (argv[1][0] != '-'))
-    {
-        status = leaveOnly(argv[1], argv[2]);
-        if (!status)
+        else
         {
-            CXXTEST_STD(cerr) << "ERROR: unknown test '" << argv[1] << "::" << argv[2] << "'" << CXXTEST_STD(endl);
-            return -1;
+            if (suiteSpecified)
+            {
+                CXXTEST_STD(cerr) << "ERROR: only one suite or one test can be specified" << CXXTEST_STD(endl);
+                return -1;
+            }
+            suiteSpecified = true;
+            bool status = false;
+            // Test case and test suite
+            if (i + 1 < argc) // suite and test
+            {
+                status = leaveOnly(argv[i], argv[i + 1]);
+                if (!status)
+                {
+                    CXXTEST_STD(cerr) << "ERROR: unknown test '" << argv[i] << "::" << argv[i + 1] << "'" << CXXTEST_STD(endl);
+                    return -1;
+                }
+                i++; // We handled two parameters
+            }
+            else // suite
+            {
+                // TODO also handle "Suite::Test"?
+                status = leaveOnly(argv[i]);
+                if (!status)
+                {
+                    CXXTEST_STD(cerr) << "ERROR: unknown suite '" << argv[i] << "'" << CXXTEST_STD(endl);
+                    return -1;
+                }
+            }
         }
     }
 #endif
 
-    tmp.process_commandline(argc, argv);
     return tmp.run();
 }
 
