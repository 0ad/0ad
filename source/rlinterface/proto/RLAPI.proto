/* Copyright (C) 2019 Wildfire Games.
 * This file is part of 0 A.D.
 *
 * 0 A.D. is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * 0 A.D. is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with 0 A.D.  If not, see <http://www.gnu.org/licenses/>.
 */
syntax = "proto3";

service RLAPI {
	rpc Step(Actions) returns (Observation) {}
	rpc Reset(ResetRequest) returns (Observation) {}
	rpc GetTemplates(GetTemplateRequest) returns (Templates) {}
}

message GetTemplateRequest {
	repeated string names = 1;
}

message Templates {
	repeated Template templates = 1;
}

message Template {
	string name = 1;
	string content = 2;
}

message Actions {
	repeated Action actions = 1;
}

message Action {
	int32 playerID = 1;
	string content = 2;
}

message Observation {
	string content = 1;
}

message ResetRequest {
	ScenarioConfig scenario = 1;
}

message AIPlayer {
	int32 id = 1;
	string type = 2;
	uint32 difficulty = 3;
}

message ScenarioConfig {
	string type = 1;  // REQUIRED (but `required` is no longer allowed...)
	string name = 2;  // REQUIRED (but `required` is no longer allowed...)
	string username = 3;
	int32 playerID = 4;
	uint32 size = 5;
	uint32 numPlayers = 6;
	uint32 seed = 7;
	uint32 aiseed = 8;
	float gameSpeed = 9;
	repeated AIPlayer players = 10;
	bool saveReplay = 11;
	//std::vector<std::tuple<int, int>> teams;
	//int32 ceasefire;
	//std::vector<std::tuple<int, int>> difficulties;
	//std::vector<std::tuple<int, std::string>> civs;
	//std::vector<std::string> victoryConditions;
	//int32 wonderDuration;
	//int32 relicDuration;
	//int32 relicCount;
	//int32 maxPlayersToHost;
	//NetworkGameType netGameType;
	//string hostAddress;
}
