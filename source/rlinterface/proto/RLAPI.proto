syntax = "proto3";

service RLAPI {
    rpc Step(Actions) returns (Observation) {}
    rpc Reset(ResetRequest) returns (Observation) {}
    rpc Connect(ConnectRequest) returns (Observation) {}
}

message Actions {
    repeated Action actions = 1;
}

message Action {
    string content = 1;
}

message Observation {
    string content = 1;
}

message ResetRequest {
    ScenarioConfig scenario = 1;
}

message ConnectRequest {
    ScenarioConfig scenario = 1;
}

message AIPlayer {
    int32 id = 1;
    string type = 2;
    uint32 difficulty = 3;
}

message ScenarioConfig {
    string type = 1;  // REQUIRED (but `required` is no longer allowed...)
    string name = 2;  // REQUIRED (but `required` is no longer allowed...)
    string username = 3;
    int32 playerID = 4;
    uint32 size = 5;
    uint32 numPlayers = 6;
	uint32 seed = 7;
	uint32 aiseed = 8;
    float gameSpeed = 9;
    repeated AIPlayer players = 10;
    bool saveReplay = 11;
    //std::vector<std::tuple<int, int>> teams;
    //int32 ceasefire;
    //std::vector<std::tuple<int, int>> difficulties;
    //std::vector<std::tuple<int, std::string>> civs;
    //std::vector<std::string> victoryConditions;
    //int32 wonderDuration;
    //int32 relicDuration;
    //int32 relicCount;
    //int32 maxPlayersToHost;
    //NetworkGameType netGameType;
    //string hostAddress;
}
