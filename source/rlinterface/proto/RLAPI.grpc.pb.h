// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: RLAPI.proto
#ifndef GRPC_RLAPI_2eproto__INCLUDED
#define GRPC_RLAPI_2eproto__INCLUDED

#include "RLAPI.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

class RLAPI final {
 public:
  static constexpr char const* service_full_name() {
    return "RLAPI";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Step(::grpc::ClientContext* context, const ::Actions& request, ::Observation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Observation>> AsyncStep(::grpc::ClientContext* context, const ::Actions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Observation>>(AsyncStepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Observation>> PrepareAsyncStep(::grpc::ClientContext* context, const ::Actions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Observation>>(PrepareAsyncStepRaw(context, request, cq));
    }
    virtual ::grpc::Status Reset(::grpc::ClientContext* context, const ::ResetRequest& request, ::Observation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Observation>> AsyncReset(::grpc::ClientContext* context, const ::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Observation>>(AsyncResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Observation>> PrepareAsyncReset(::grpc::ClientContext* context, const ::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Observation>>(PrepareAsyncResetRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTemplates(::grpc::ClientContext* context, const ::GetTemplateRequest& request, ::Templates* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Templates>> AsyncGetTemplates(::grpc::ClientContext* context, const ::GetTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Templates>>(AsyncGetTemplatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Templates>> PrepareAsyncGetTemplates(::grpc::ClientContext* context, const ::GetTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Templates>>(PrepareAsyncGetTemplatesRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Step(::grpc::ClientContext* context, const ::Actions* request, ::Observation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Reset(::grpc::ClientContext* context, const ::ResetRequest* request, ::Observation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTemplates(::grpc::ClientContext* context, const ::GetTemplateRequest* request, ::Templates* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Observation>* AsyncStepRaw(::grpc::ClientContext* context, const ::Actions& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Observation>* PrepareAsyncStepRaw(::grpc::ClientContext* context, const ::Actions& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Observation>* AsyncResetRaw(::grpc::ClientContext* context, const ::ResetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Observation>* PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::ResetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Templates>* AsyncGetTemplatesRaw(::grpc::ClientContext* context, const ::GetTemplateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Templates>* PrepareAsyncGetTemplatesRaw(::grpc::ClientContext* context, const ::GetTemplateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Step(::grpc::ClientContext* context, const ::Actions& request, ::Observation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Observation>> AsyncStep(::grpc::ClientContext* context, const ::Actions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Observation>>(AsyncStepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Observation>> PrepareAsyncStep(::grpc::ClientContext* context, const ::Actions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Observation>>(PrepareAsyncStepRaw(context, request, cq));
    }
    ::grpc::Status Reset(::grpc::ClientContext* context, const ::ResetRequest& request, ::Observation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Observation>> AsyncReset(::grpc::ClientContext* context, const ::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Observation>>(AsyncResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Observation>> PrepareAsyncReset(::grpc::ClientContext* context, const ::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Observation>>(PrepareAsyncResetRaw(context, request, cq));
    }
    ::grpc::Status GetTemplates(::grpc::ClientContext* context, const ::GetTemplateRequest& request, ::Templates* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Templates>> AsyncGetTemplates(::grpc::ClientContext* context, const ::GetTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Templates>>(AsyncGetTemplatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Templates>> PrepareAsyncGetTemplates(::grpc::ClientContext* context, const ::GetTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Templates>>(PrepareAsyncGetTemplatesRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Step(::grpc::ClientContext* context, const ::Actions* request, ::Observation* response, std::function<void(::grpc::Status)>) override;
      void Reset(::grpc::ClientContext* context, const ::ResetRequest* request, ::Observation* response, std::function<void(::grpc::Status)>) override;
      void GetTemplates(::grpc::ClientContext* context, const ::GetTemplateRequest* request, ::Templates* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Observation>* AsyncStepRaw(::grpc::ClientContext* context, const ::Actions& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Observation>* PrepareAsyncStepRaw(::grpc::ClientContext* context, const ::Actions& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Observation>* AsyncResetRaw(::grpc::ClientContext* context, const ::ResetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Observation>* PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::ResetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Templates>* AsyncGetTemplatesRaw(::grpc::ClientContext* context, const ::GetTemplateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Templates>* PrepareAsyncGetTemplatesRaw(::grpc::ClientContext* context, const ::GetTemplateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Step_;
    const ::grpc::internal::RpcMethod rpcmethod_Reset_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTemplates_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Step(::grpc::ServerContext* context, const ::Actions* request, ::Observation* response);
    virtual ::grpc::Status Reset(::grpc::ServerContext* context, const ::ResetRequest* request, ::Observation* response);
    virtual ::grpc::Status GetTemplates(::grpc::ServerContext* context, const ::GetTemplateRequest* request, ::Templates* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Step() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* context, const ::Actions* request, ::Observation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStep(::grpc::ServerContext* context, ::Actions* request, ::grpc::ServerAsyncResponseWriter< ::Observation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Reset() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::ResetRequest* request, ::Observation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReset(::grpc::ServerContext* context, ::ResetRequest* request, ::grpc::ServerAsyncResponseWriter< ::Observation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTemplates() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTemplates(::grpc::ServerContext* context, const ::GetTemplateRequest* request, ::Templates* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTemplates(::grpc::ServerContext* context, ::GetTemplateRequest* request, ::grpc::ServerAsyncResponseWriter< ::Templates>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Step<WithAsyncMethod_Reset<WithAsyncMethod_GetTemplates<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Step() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::Actions, ::Observation>(
          [this](::grpc::ServerContext* context,
                 const ::Actions* request,
                 ::Observation* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Step(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* context, const ::Actions* request, ::Observation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Step(::grpc::ServerContext* context, const ::Actions* request, ::Observation* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Reset() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::ResetRequest, ::Observation>(
          [this](::grpc::ServerContext* context,
                 const ::ResetRequest* request,
                 ::Observation* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Reset(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::ResetRequest* request, ::Observation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Reset(::grpc::ServerContext* context, const ::ResetRequest* request, ::Observation* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetTemplates() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::GetTemplateRequest, ::Templates>(
          [this](::grpc::ServerContext* context,
                 const ::GetTemplateRequest* request,
                 ::Templates* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetTemplates(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTemplates(::grpc::ServerContext* context, const ::GetTemplateRequest* request, ::Templates* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetTemplates(::grpc::ServerContext* context, const ::GetTemplateRequest* request, ::Templates* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Step<ExperimentalWithCallbackMethod_Reset<ExperimentalWithCallbackMethod_GetTemplates<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Step() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* context, const ::Actions* request, ::Observation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Reset() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::ResetRequest* request, ::Observation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTemplates() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTemplates(::grpc::ServerContext* context, const ::GetTemplateRequest* request, ::Templates* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Step() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* context, const ::Actions* request, ::Observation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStep(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Reset() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::ResetRequest* request, ::Observation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetTemplates() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTemplates(::grpc::ServerContext* context, const ::GetTemplateRequest* request, ::Templates* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTemplates(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Step() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Step(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* context, const ::Actions* request, ::Observation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Step(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Reset() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Reset(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::ResetRequest* request, ::Observation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Reset(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetTemplates() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetTemplates(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTemplates(::grpc::ServerContext* context, const ::GetTemplateRequest* request, ::Templates* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetTemplates(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Step() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::Actions, ::Observation>(std::bind(&WithStreamedUnaryMethod_Step<BaseClass>::StreamedStep, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Step(::grpc::ServerContext* context, const ::Actions* request, ::Observation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStep(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Actions,::Observation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Reset() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::ResetRequest, ::Observation>(std::bind(&WithStreamedUnaryMethod_Reset<BaseClass>::StreamedReset, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::ResetRequest* request, ::Observation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ResetRequest,::Observation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetTemplates() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::GetTemplateRequest, ::Templates>(std::bind(&WithStreamedUnaryMethod_GetTemplates<BaseClass>::StreamedGetTemplates, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTemplates(::grpc::ServerContext* context, const ::GetTemplateRequest* request, ::Templates* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTemplates(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GetTemplateRequest,::Templates>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Step<WithStreamedUnaryMethod_Reset<WithStreamedUnaryMethod_GetTemplates<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Step<WithStreamedUnaryMethod_Reset<WithStreamedUnaryMethod_GetTemplates<Service > > > StreamedService;
};


#endif  // GRPC_RLAPI_2eproto__INCLUDED
