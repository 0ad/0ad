// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RLAPI.proto

#ifndef PROTOBUF_INCLUDED_RLAPI_2eproto
#define PROTOBUF_INCLUDED_RLAPI_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RLAPI_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_RLAPI_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_RLAPI_2eproto();
class AIPlayer;
class AIPlayerDefaultTypeInternal;
extern AIPlayerDefaultTypeInternal _AIPlayer_default_instance_;
class Action;
class ActionDefaultTypeInternal;
extern ActionDefaultTypeInternal _Action_default_instance_;
class Actions;
class ActionsDefaultTypeInternal;
extern ActionsDefaultTypeInternal _Actions_default_instance_;
class ConnectRequest;
class ConnectRequestDefaultTypeInternal;
extern ConnectRequestDefaultTypeInternal _ConnectRequest_default_instance_;
class GetTemplateRequest;
class GetTemplateRequestDefaultTypeInternal;
extern GetTemplateRequestDefaultTypeInternal _GetTemplateRequest_default_instance_;
class Observation;
class ObservationDefaultTypeInternal;
extern ObservationDefaultTypeInternal _Observation_default_instance_;
class ResetRequest;
class ResetRequestDefaultTypeInternal;
extern ResetRequestDefaultTypeInternal _ResetRequest_default_instance_;
class ScenarioConfig;
class ScenarioConfigDefaultTypeInternal;
extern ScenarioConfigDefaultTypeInternal _ScenarioConfig_default_instance_;
class Template;
class TemplateDefaultTypeInternal;
extern TemplateDefaultTypeInternal _Template_default_instance_;
class Templates;
class TemplatesDefaultTypeInternal;
extern TemplatesDefaultTypeInternal _Templates_default_instance_;
namespace google {
namespace protobuf {
template<> ::AIPlayer* Arena::CreateMaybeMessage<::AIPlayer>(Arena*);
template<> ::Action* Arena::CreateMaybeMessage<::Action>(Arena*);
template<> ::Actions* Arena::CreateMaybeMessage<::Actions>(Arena*);
template<> ::ConnectRequest* Arena::CreateMaybeMessage<::ConnectRequest>(Arena*);
template<> ::GetTemplateRequest* Arena::CreateMaybeMessage<::GetTemplateRequest>(Arena*);
template<> ::Observation* Arena::CreateMaybeMessage<::Observation>(Arena*);
template<> ::ResetRequest* Arena::CreateMaybeMessage<::ResetRequest>(Arena*);
template<> ::ScenarioConfig* Arena::CreateMaybeMessage<::ScenarioConfig>(Arena*);
template<> ::Template* Arena::CreateMaybeMessage<::Template>(Arena*);
template<> ::Templates* Arena::CreateMaybeMessage<::Templates>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class GetTemplateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GetTemplateRequest) */ {
 public:
  GetTemplateRequest();
  virtual ~GetTemplateRequest();

  GetTemplateRequest(const GetTemplateRequest& from);

  inline GetTemplateRequest& operator=(const GetTemplateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTemplateRequest(GetTemplateRequest&& from) noexcept
    : GetTemplateRequest() {
    *this = ::std::move(from);
  }

  inline GetTemplateRequest& operator=(GetTemplateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetTemplateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTemplateRequest* internal_default_instance() {
    return reinterpret_cast<const GetTemplateRequest*>(
               &_GetTemplateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetTemplateRequest* other);
  friend void swap(GetTemplateRequest& a, GetTemplateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTemplateRequest* New() const final {
    return CreateMaybeMessage<GetTemplateRequest>(nullptr);
  }

  GetTemplateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetTemplateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetTemplateRequest& from);
  void MergeFrom(const GetTemplateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTemplateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string names = 1;
  int names_size() const;
  void clear_names();
  static const int kNamesFieldNumber = 1;
  const ::std::string& names(int index) const;
  ::std::string* mutable_names(int index);
  void set_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_names(int index, ::std::string&& value);
  #endif
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  ::std::string* add_names();
  void add_names(const ::std::string& value);
  #if LANG_CXX11
  void add_names(::std::string&& value);
  #endif
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& names() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_names();

  // @@protoc_insertion_point(class_scope:GetTemplateRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> names_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RLAPI_2eproto;
};
// -------------------------------------------------------------------

class Templates final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Templates) */ {
 public:
  Templates();
  virtual ~Templates();

  Templates(const Templates& from);

  inline Templates& operator=(const Templates& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Templates(Templates&& from) noexcept
    : Templates() {
    *this = ::std::move(from);
  }

  inline Templates& operator=(Templates&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Templates& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Templates* internal_default_instance() {
    return reinterpret_cast<const Templates*>(
               &_Templates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Templates* other);
  friend void swap(Templates& a, Templates& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Templates* New() const final {
    return CreateMaybeMessage<Templates>(nullptr);
  }

  Templates* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Templates>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Templates& from);
  void MergeFrom(const Templates& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Templates* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Template templates = 1;
  int templates_size() const;
  void clear_templates();
  static const int kTemplatesFieldNumber = 1;
  ::Template* mutable_templates(int index);
  ::google::protobuf::RepeatedPtrField< ::Template >*
      mutable_templates();
  const ::Template& templates(int index) const;
  ::Template* add_templates();
  const ::google::protobuf::RepeatedPtrField< ::Template >&
      templates() const;

  // @@protoc_insertion_point(class_scope:Templates)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Template > templates_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RLAPI_2eproto;
};
// -------------------------------------------------------------------

class Template final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Template) */ {
 public:
  Template();
  virtual ~Template();

  Template(const Template& from);

  inline Template& operator=(const Template& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Template(Template&& from) noexcept
    : Template() {
    *this = ::std::move(from);
  }

  inline Template& operator=(Template&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Template& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Template* internal_default_instance() {
    return reinterpret_cast<const Template*>(
               &_Template_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Template* other);
  friend void swap(Template& a, Template& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Template* New() const final {
    return CreateMaybeMessage<Template>(nullptr);
  }

  Template* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Template>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Template& from);
  void MergeFrom(const Template& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Template* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:Template)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RLAPI_2eproto;
};
// -------------------------------------------------------------------

class Actions final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Actions) */ {
 public:
  Actions();
  virtual ~Actions();

  Actions(const Actions& from);

  inline Actions& operator=(const Actions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Actions(Actions&& from) noexcept
    : Actions() {
    *this = ::std::move(from);
  }

  inline Actions& operator=(Actions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Actions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Actions* internal_default_instance() {
    return reinterpret_cast<const Actions*>(
               &_Actions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Actions* other);
  friend void swap(Actions& a, Actions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Actions* New() const final {
    return CreateMaybeMessage<Actions>(nullptr);
  }

  Actions* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Actions>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Actions& from);
  void MergeFrom(const Actions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Actions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Action actions = 1;
  int actions_size() const;
  void clear_actions();
  static const int kActionsFieldNumber = 1;
  ::Action* mutable_actions(int index);
  ::google::protobuf::RepeatedPtrField< ::Action >*
      mutable_actions();
  const ::Action& actions(int index) const;
  ::Action* add_actions();
  const ::google::protobuf::RepeatedPtrField< ::Action >&
      actions() const;

  // @@protoc_insertion_point(class_scope:Actions)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Action > actions_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RLAPI_2eproto;
};
// -------------------------------------------------------------------

class Action final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Action) */ {
 public:
  Action();
  virtual ~Action();

  Action(const Action& from);

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Action(Action&& from) noexcept
    : Action() {
    *this = ::std::move(from);
  }

  inline Action& operator=(Action&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Action& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Action* internal_default_instance() {
    return reinterpret_cast<const Action*>(
               &_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Action* other);
  friend void swap(Action& a, Action& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Action* New() const final {
    return CreateMaybeMessage<Action>(nullptr);
  }

  Action* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Action>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string content = 1;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:Action)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RLAPI_2eproto;
};
// -------------------------------------------------------------------

class Observation final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Observation) */ {
 public:
  Observation();
  virtual ~Observation();

  Observation(const Observation& from);

  inline Observation& operator=(const Observation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Observation(Observation&& from) noexcept
    : Observation() {
    *this = ::std::move(from);
  }

  inline Observation& operator=(Observation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Observation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Observation* internal_default_instance() {
    return reinterpret_cast<const Observation*>(
               &_Observation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Observation* other);
  friend void swap(Observation& a, Observation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Observation* New() const final {
    return CreateMaybeMessage<Observation>(nullptr);
  }

  Observation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Observation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Observation& from);
  void MergeFrom(const Observation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Observation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string content = 1;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:Observation)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RLAPI_2eproto;
};
// -------------------------------------------------------------------

class ResetRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ResetRequest) */ {
 public:
  ResetRequest();
  virtual ~ResetRequest();

  ResetRequest(const ResetRequest& from);

  inline ResetRequest& operator=(const ResetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResetRequest(ResetRequest&& from) noexcept
    : ResetRequest() {
    *this = ::std::move(from);
  }

  inline ResetRequest& operator=(ResetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ResetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetRequest* internal_default_instance() {
    return reinterpret_cast<const ResetRequest*>(
               &_ResetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ResetRequest* other);
  friend void swap(ResetRequest& a, ResetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResetRequest* New() const final {
    return CreateMaybeMessage<ResetRequest>(nullptr);
  }

  ResetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResetRequest& from);
  void MergeFrom(const ResetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ScenarioConfig scenario = 1;
  bool has_scenario() const;
  void clear_scenario();
  static const int kScenarioFieldNumber = 1;
  const ::ScenarioConfig& scenario() const;
  ::ScenarioConfig* release_scenario();
  ::ScenarioConfig* mutable_scenario();
  void set_allocated_scenario(::ScenarioConfig* scenario);

  // @@protoc_insertion_point(class_scope:ResetRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ScenarioConfig* scenario_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RLAPI_2eproto;
};
// -------------------------------------------------------------------

class ConnectRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ConnectRequest) */ {
 public:
  ConnectRequest();
  virtual ~ConnectRequest();

  ConnectRequest(const ConnectRequest& from);

  inline ConnectRequest& operator=(const ConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectRequest(ConnectRequest&& from) noexcept
    : ConnectRequest() {
    *this = ::std::move(from);
  }

  inline ConnectRequest& operator=(ConnectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ConnectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectRequest* internal_default_instance() {
    return reinterpret_cast<const ConnectRequest*>(
               &_ConnectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ConnectRequest* other);
  friend void swap(ConnectRequest& a, ConnectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectRequest* New() const final {
    return CreateMaybeMessage<ConnectRequest>(nullptr);
  }

  ConnectRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConnectRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConnectRequest& from);
  void MergeFrom(const ConnectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ScenarioConfig scenario = 1;
  bool has_scenario() const;
  void clear_scenario();
  static const int kScenarioFieldNumber = 1;
  const ::ScenarioConfig& scenario() const;
  ::ScenarioConfig* release_scenario();
  ::ScenarioConfig* mutable_scenario();
  void set_allocated_scenario(::ScenarioConfig* scenario);

  // @@protoc_insertion_point(class_scope:ConnectRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ScenarioConfig* scenario_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RLAPI_2eproto;
};
// -------------------------------------------------------------------

class AIPlayer final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AIPlayer) */ {
 public:
  AIPlayer();
  virtual ~AIPlayer();

  AIPlayer(const AIPlayer& from);

  inline AIPlayer& operator=(const AIPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AIPlayer(AIPlayer&& from) noexcept
    : AIPlayer() {
    *this = ::std::move(from);
  }

  inline AIPlayer& operator=(AIPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AIPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AIPlayer* internal_default_instance() {
    return reinterpret_cast<const AIPlayer*>(
               &_AIPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(AIPlayer* other);
  friend void swap(AIPlayer& a, AIPlayer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AIPlayer* New() const final {
    return CreateMaybeMessage<AIPlayer>(nullptr);
  }

  AIPlayer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AIPlayer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AIPlayer& from);
  void MergeFrom(const AIPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AIPlayer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // uint32 difficulty = 3;
  void clear_difficulty();
  static const int kDifficultyFieldNumber = 3;
  ::google::protobuf::uint32 difficulty() const;
  void set_difficulty(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:AIPlayer)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::uint32 difficulty_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RLAPI_2eproto;
};
// -------------------------------------------------------------------

class ScenarioConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ScenarioConfig) */ {
 public:
  ScenarioConfig();
  virtual ~ScenarioConfig();

  ScenarioConfig(const ScenarioConfig& from);

  inline ScenarioConfig& operator=(const ScenarioConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScenarioConfig(ScenarioConfig&& from) noexcept
    : ScenarioConfig() {
    *this = ::std::move(from);
  }

  inline ScenarioConfig& operator=(ScenarioConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ScenarioConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScenarioConfig* internal_default_instance() {
    return reinterpret_cast<const ScenarioConfig*>(
               &_ScenarioConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ScenarioConfig* other);
  friend void swap(ScenarioConfig& a, ScenarioConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScenarioConfig* New() const final {
    return CreateMaybeMessage<ScenarioConfig>(nullptr);
  }

  ScenarioConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScenarioConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScenarioConfig& from);
  void MergeFrom(const ScenarioConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScenarioConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AIPlayer players = 10;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 10;
  ::AIPlayer* mutable_players(int index);
  ::google::protobuf::RepeatedPtrField< ::AIPlayer >*
      mutable_players();
  const ::AIPlayer& players(int index) const;
  ::AIPlayer* add_players();
  const ::google::protobuf::RepeatedPtrField< ::AIPlayer >&
      players() const;

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string username = 3;
  void clear_username();
  static const int kUsernameFieldNumber = 3;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // int32 playerID = 4;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 4;
  ::google::protobuf::int32 playerid() const;
  void set_playerid(::google::protobuf::int32 value);

  // uint32 size = 5;
  void clear_size();
  static const int kSizeFieldNumber = 5;
  ::google::protobuf::uint32 size() const;
  void set_size(::google::protobuf::uint32 value);

  // uint32 numPlayers = 6;
  void clear_numplayers();
  static const int kNumPlayersFieldNumber = 6;
  ::google::protobuf::uint32 numplayers() const;
  void set_numplayers(::google::protobuf::uint32 value);

  // uint32 seed = 7;
  void clear_seed();
  static const int kSeedFieldNumber = 7;
  ::google::protobuf::uint32 seed() const;
  void set_seed(::google::protobuf::uint32 value);

  // uint32 aiseed = 8;
  void clear_aiseed();
  static const int kAiseedFieldNumber = 8;
  ::google::protobuf::uint32 aiseed() const;
  void set_aiseed(::google::protobuf::uint32 value);

  // float gameSpeed = 9;
  void clear_gamespeed();
  static const int kGameSpeedFieldNumber = 9;
  float gamespeed() const;
  void set_gamespeed(float value);

  // bool saveReplay = 11;
  void clear_savereplay();
  static const int kSaveReplayFieldNumber = 11;
  bool savereplay() const;
  void set_savereplay(bool value);

  // @@protoc_insertion_point(class_scope:ScenarioConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::AIPlayer > players_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::int32 playerid_;
  ::google::protobuf::uint32 size_;
  ::google::protobuf::uint32 numplayers_;
  ::google::protobuf::uint32 seed_;
  ::google::protobuf::uint32 aiseed_;
  float gamespeed_;
  bool savereplay_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RLAPI_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetTemplateRequest

// repeated string names = 1;
inline int GetTemplateRequest::names_size() const {
  return names_.size();
}
inline void GetTemplateRequest::clear_names() {
  names_.Clear();
}
inline const ::std::string& GetTemplateRequest::names(int index) const {
  // @@protoc_insertion_point(field_get:GetTemplateRequest.names)
  return names_.Get(index);
}
inline ::std::string* GetTemplateRequest::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:GetTemplateRequest.names)
  return names_.Mutable(index);
}
inline void GetTemplateRequest::set_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:GetTemplateRequest.names)
  names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GetTemplateRequest::set_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:GetTemplateRequest.names)
  names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GetTemplateRequest::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GetTemplateRequest.names)
}
inline void GetTemplateRequest::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GetTemplateRequest.names)
}
inline ::std::string* GetTemplateRequest::add_names() {
  // @@protoc_insertion_point(field_add_mutable:GetTemplateRequest.names)
  return names_.Add();
}
inline void GetTemplateRequest::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GetTemplateRequest.names)
}
#if LANG_CXX11
inline void GetTemplateRequest::add_names(::std::string&& value) {
  names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:GetTemplateRequest.names)
}
#endif
inline void GetTemplateRequest::add_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GetTemplateRequest.names)
}
inline void GetTemplateRequest::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GetTemplateRequest.names)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
GetTemplateRequest::names() const {
  // @@protoc_insertion_point(field_list:GetTemplateRequest.names)
  return names_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
GetTemplateRequest::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:GetTemplateRequest.names)
  return &names_;
}

// -------------------------------------------------------------------

// Templates

// repeated .Template templates = 1;
inline int Templates::templates_size() const {
  return templates_.size();
}
inline void Templates::clear_templates() {
  templates_.Clear();
}
inline ::Template* Templates::mutable_templates(int index) {
  // @@protoc_insertion_point(field_mutable:Templates.templates)
  return templates_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Template >*
Templates::mutable_templates() {
  // @@protoc_insertion_point(field_mutable_list:Templates.templates)
  return &templates_;
}
inline const ::Template& Templates::templates(int index) const {
  // @@protoc_insertion_point(field_get:Templates.templates)
  return templates_.Get(index);
}
inline ::Template* Templates::add_templates() {
  // @@protoc_insertion_point(field_add:Templates.templates)
  return templates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Template >&
Templates::templates() const {
  // @@protoc_insertion_point(field_list:Templates.templates)
  return templates_;
}

// -------------------------------------------------------------------

// Template

// string name = 1;
inline void Template::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Template::name() const {
  // @@protoc_insertion_point(field_get:Template.name)
  return name_.GetNoArena();
}
inline void Template::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Template.name)
}
#if LANG_CXX11
inline void Template::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Template.name)
}
#endif
inline void Template::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Template.name)
}
inline void Template::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Template.name)
}
inline ::std::string* Template::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Template.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Template::release_name() {
  // @@protoc_insertion_point(field_release:Template.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Template::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Template.name)
}

// string content = 2;
inline void Template::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Template::content() const {
  // @@protoc_insertion_point(field_get:Template.content)
  return content_.GetNoArena();
}
inline void Template::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Template.content)
}
#if LANG_CXX11
inline void Template::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Template.content)
}
#endif
inline void Template::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Template.content)
}
inline void Template::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Template.content)
}
inline ::std::string* Template::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:Template.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Template::release_content() {
  // @@protoc_insertion_point(field_release:Template.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Template::set_allocated_content(::std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:Template.content)
}

// -------------------------------------------------------------------

// Actions

// repeated .Action actions = 1;
inline int Actions::actions_size() const {
  return actions_.size();
}
inline void Actions::clear_actions() {
  actions_.Clear();
}
inline ::Action* Actions::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:Actions.actions)
  return actions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Action >*
Actions::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:Actions.actions)
  return &actions_;
}
inline const ::Action& Actions::actions(int index) const {
  // @@protoc_insertion_point(field_get:Actions.actions)
  return actions_.Get(index);
}
inline ::Action* Actions::add_actions() {
  // @@protoc_insertion_point(field_add:Actions.actions)
  return actions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Action >&
Actions::actions() const {
  // @@protoc_insertion_point(field_list:Actions.actions)
  return actions_;
}

// -------------------------------------------------------------------

// Action

// string content = 1;
inline void Action::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Action::content() const {
  // @@protoc_insertion_point(field_get:Action.content)
  return content_.GetNoArena();
}
inline void Action::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Action.content)
}
#if LANG_CXX11
inline void Action::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Action.content)
}
#endif
inline void Action::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Action.content)
}
inline void Action::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Action.content)
}
inline ::std::string* Action::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:Action.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Action::release_content() {
  // @@protoc_insertion_point(field_release:Action.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Action::set_allocated_content(::std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:Action.content)
}

// -------------------------------------------------------------------

// Observation

// string content = 1;
inline void Observation::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Observation::content() const {
  // @@protoc_insertion_point(field_get:Observation.content)
  return content_.GetNoArena();
}
inline void Observation::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Observation.content)
}
#if LANG_CXX11
inline void Observation::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Observation.content)
}
#endif
inline void Observation::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Observation.content)
}
inline void Observation::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Observation.content)
}
inline ::std::string* Observation::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:Observation.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Observation::release_content() {
  // @@protoc_insertion_point(field_release:Observation.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Observation::set_allocated_content(::std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:Observation.content)
}

// -------------------------------------------------------------------

// ResetRequest

// .ScenarioConfig scenario = 1;
inline bool ResetRequest::has_scenario() const {
  return this != internal_default_instance() && scenario_ != nullptr;
}
inline void ResetRequest::clear_scenario() {
  if (GetArenaNoVirtual() == nullptr && scenario_ != nullptr) {
    delete scenario_;
  }
  scenario_ = nullptr;
}
inline const ::ScenarioConfig& ResetRequest::scenario() const {
  const ::ScenarioConfig* p = scenario_;
  // @@protoc_insertion_point(field_get:ResetRequest.scenario)
  return p != nullptr ? *p : *reinterpret_cast<const ::ScenarioConfig*>(
      &::_ScenarioConfig_default_instance_);
}
inline ::ScenarioConfig* ResetRequest::release_scenario() {
  // @@protoc_insertion_point(field_release:ResetRequest.scenario)
  
  ::ScenarioConfig* temp = scenario_;
  scenario_ = nullptr;
  return temp;
}
inline ::ScenarioConfig* ResetRequest::mutable_scenario() {
  
  if (scenario_ == nullptr) {
    auto* p = CreateMaybeMessage<::ScenarioConfig>(GetArenaNoVirtual());
    scenario_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ResetRequest.scenario)
  return scenario_;
}
inline void ResetRequest::set_allocated_scenario(::ScenarioConfig* scenario) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scenario_;
  }
  if (scenario) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scenario = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scenario, submessage_arena);
    }
    
  } else {
    
  }
  scenario_ = scenario;
  // @@protoc_insertion_point(field_set_allocated:ResetRequest.scenario)
}

// -------------------------------------------------------------------

// ConnectRequest

// .ScenarioConfig scenario = 1;
inline bool ConnectRequest::has_scenario() const {
  return this != internal_default_instance() && scenario_ != nullptr;
}
inline void ConnectRequest::clear_scenario() {
  if (GetArenaNoVirtual() == nullptr && scenario_ != nullptr) {
    delete scenario_;
  }
  scenario_ = nullptr;
}
inline const ::ScenarioConfig& ConnectRequest::scenario() const {
  const ::ScenarioConfig* p = scenario_;
  // @@protoc_insertion_point(field_get:ConnectRequest.scenario)
  return p != nullptr ? *p : *reinterpret_cast<const ::ScenarioConfig*>(
      &::_ScenarioConfig_default_instance_);
}
inline ::ScenarioConfig* ConnectRequest::release_scenario() {
  // @@protoc_insertion_point(field_release:ConnectRequest.scenario)
  
  ::ScenarioConfig* temp = scenario_;
  scenario_ = nullptr;
  return temp;
}
inline ::ScenarioConfig* ConnectRequest::mutable_scenario() {
  
  if (scenario_ == nullptr) {
    auto* p = CreateMaybeMessage<::ScenarioConfig>(GetArenaNoVirtual());
    scenario_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ConnectRequest.scenario)
  return scenario_;
}
inline void ConnectRequest::set_allocated_scenario(::ScenarioConfig* scenario) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scenario_;
  }
  if (scenario) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scenario = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scenario, submessage_arena);
    }
    
  } else {
    
  }
  scenario_ = scenario;
  // @@protoc_insertion_point(field_set_allocated:ConnectRequest.scenario)
}

// -------------------------------------------------------------------

// AIPlayer

// int32 id = 1;
inline void AIPlayer::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 AIPlayer::id() const {
  // @@protoc_insertion_point(field_get:AIPlayer.id)
  return id_;
}
inline void AIPlayer::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:AIPlayer.id)
}

// string type = 2;
inline void AIPlayer::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AIPlayer::type() const {
  // @@protoc_insertion_point(field_get:AIPlayer.type)
  return type_.GetNoArena();
}
inline void AIPlayer::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AIPlayer.type)
}
#if LANG_CXX11
inline void AIPlayer::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AIPlayer.type)
}
#endif
inline void AIPlayer::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AIPlayer.type)
}
inline void AIPlayer::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AIPlayer.type)
}
inline ::std::string* AIPlayer::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:AIPlayer.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AIPlayer::release_type() {
  // @@protoc_insertion_point(field_release:AIPlayer.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AIPlayer::set_allocated_type(::std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:AIPlayer.type)
}

// uint32 difficulty = 3;
inline void AIPlayer::clear_difficulty() {
  difficulty_ = 0u;
}
inline ::google::protobuf::uint32 AIPlayer::difficulty() const {
  // @@protoc_insertion_point(field_get:AIPlayer.difficulty)
  return difficulty_;
}
inline void AIPlayer::set_difficulty(::google::protobuf::uint32 value) {
  
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:AIPlayer.difficulty)
}

// -------------------------------------------------------------------

// ScenarioConfig

// string type = 1;
inline void ScenarioConfig::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScenarioConfig::type() const {
  // @@protoc_insertion_point(field_get:ScenarioConfig.type)
  return type_.GetNoArena();
}
inline void ScenarioConfig::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ScenarioConfig.type)
}
#if LANG_CXX11
inline void ScenarioConfig::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ScenarioConfig.type)
}
#endif
inline void ScenarioConfig::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ScenarioConfig.type)
}
inline void ScenarioConfig::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ScenarioConfig.type)
}
inline ::std::string* ScenarioConfig::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:ScenarioConfig.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScenarioConfig::release_type() {
  // @@protoc_insertion_point(field_release:ScenarioConfig.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScenarioConfig::set_allocated_type(::std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ScenarioConfig.type)
}

// string name = 2;
inline void ScenarioConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScenarioConfig::name() const {
  // @@protoc_insertion_point(field_get:ScenarioConfig.name)
  return name_.GetNoArena();
}
inline void ScenarioConfig::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ScenarioConfig.name)
}
#if LANG_CXX11
inline void ScenarioConfig::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ScenarioConfig.name)
}
#endif
inline void ScenarioConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ScenarioConfig.name)
}
inline void ScenarioConfig::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ScenarioConfig.name)
}
inline ::std::string* ScenarioConfig::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ScenarioConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScenarioConfig::release_name() {
  // @@protoc_insertion_point(field_release:ScenarioConfig.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScenarioConfig::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ScenarioConfig.name)
}

// string username = 3;
inline void ScenarioConfig::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScenarioConfig::username() const {
  // @@protoc_insertion_point(field_get:ScenarioConfig.username)
  return username_.GetNoArena();
}
inline void ScenarioConfig::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ScenarioConfig.username)
}
#if LANG_CXX11
inline void ScenarioConfig::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ScenarioConfig.username)
}
#endif
inline void ScenarioConfig::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ScenarioConfig.username)
}
inline void ScenarioConfig::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ScenarioConfig.username)
}
inline ::std::string* ScenarioConfig::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:ScenarioConfig.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScenarioConfig::release_username() {
  // @@protoc_insertion_point(field_release:ScenarioConfig.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScenarioConfig::set_allocated_username(::std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:ScenarioConfig.username)
}

// int32 playerID = 4;
inline void ScenarioConfig::clear_playerid() {
  playerid_ = 0;
}
inline ::google::protobuf::int32 ScenarioConfig::playerid() const {
  // @@protoc_insertion_point(field_get:ScenarioConfig.playerID)
  return playerid_;
}
inline void ScenarioConfig::set_playerid(::google::protobuf::int32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:ScenarioConfig.playerID)
}

// uint32 size = 5;
inline void ScenarioConfig::clear_size() {
  size_ = 0u;
}
inline ::google::protobuf::uint32 ScenarioConfig::size() const {
  // @@protoc_insertion_point(field_get:ScenarioConfig.size)
  return size_;
}
inline void ScenarioConfig::set_size(::google::protobuf::uint32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:ScenarioConfig.size)
}

// uint32 numPlayers = 6;
inline void ScenarioConfig::clear_numplayers() {
  numplayers_ = 0u;
}
inline ::google::protobuf::uint32 ScenarioConfig::numplayers() const {
  // @@protoc_insertion_point(field_get:ScenarioConfig.numPlayers)
  return numplayers_;
}
inline void ScenarioConfig::set_numplayers(::google::protobuf::uint32 value) {
  
  numplayers_ = value;
  // @@protoc_insertion_point(field_set:ScenarioConfig.numPlayers)
}

// uint32 seed = 7;
inline void ScenarioConfig::clear_seed() {
  seed_ = 0u;
}
inline ::google::protobuf::uint32 ScenarioConfig::seed() const {
  // @@protoc_insertion_point(field_get:ScenarioConfig.seed)
  return seed_;
}
inline void ScenarioConfig::set_seed(::google::protobuf::uint32 value) {
  
  seed_ = value;
  // @@protoc_insertion_point(field_set:ScenarioConfig.seed)
}

// uint32 aiseed = 8;
inline void ScenarioConfig::clear_aiseed() {
  aiseed_ = 0u;
}
inline ::google::protobuf::uint32 ScenarioConfig::aiseed() const {
  // @@protoc_insertion_point(field_get:ScenarioConfig.aiseed)
  return aiseed_;
}
inline void ScenarioConfig::set_aiseed(::google::protobuf::uint32 value) {
  
  aiseed_ = value;
  // @@protoc_insertion_point(field_set:ScenarioConfig.aiseed)
}

// float gameSpeed = 9;
inline void ScenarioConfig::clear_gamespeed() {
  gamespeed_ = 0;
}
inline float ScenarioConfig::gamespeed() const {
  // @@protoc_insertion_point(field_get:ScenarioConfig.gameSpeed)
  return gamespeed_;
}
inline void ScenarioConfig::set_gamespeed(float value) {
  
  gamespeed_ = value;
  // @@protoc_insertion_point(field_set:ScenarioConfig.gameSpeed)
}

// repeated .AIPlayer players = 10;
inline int ScenarioConfig::players_size() const {
  return players_.size();
}
inline void ScenarioConfig::clear_players() {
  players_.Clear();
}
inline ::AIPlayer* ScenarioConfig::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:ScenarioConfig.players)
  return players_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AIPlayer >*
ScenarioConfig::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:ScenarioConfig.players)
  return &players_;
}
inline const ::AIPlayer& ScenarioConfig::players(int index) const {
  // @@protoc_insertion_point(field_get:ScenarioConfig.players)
  return players_.Get(index);
}
inline ::AIPlayer* ScenarioConfig::add_players() {
  // @@protoc_insertion_point(field_add:ScenarioConfig.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AIPlayer >&
ScenarioConfig::players() const {
  // @@protoc_insertion_point(field_list:ScenarioConfig.players)
  return players_;
}

// bool saveReplay = 11;
inline void ScenarioConfig::clear_savereplay() {
  savereplay_ = false;
}
inline bool ScenarioConfig::savereplay() const {
  // @@protoc_insertion_point(field_get:ScenarioConfig.saveReplay)
  return savereplay_;
}
inline void ScenarioConfig::set_savereplay(bool value) {
  
  savereplay_ = value;
  // @@protoc_insertion_point(field_set:ScenarioConfig.saveReplay)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_RLAPI_2eproto
