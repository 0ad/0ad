// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rlinterface/RLInterface.proto

#include "rlinterface/RLInterface.pb.h"
#include "rlinterface/RLInterface.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* RLInterface_method_names[] = {
  "/RLInterface/Step",
  "/RLInterface/Reset",
  "/RLInterface/Connect",
};

std::unique_ptr< RLInterface::Stub> RLInterface::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RLInterface::Stub> stub(new RLInterface::Stub(channel));
  return stub;
}

RLInterface::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Step_(RLInterface_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Reset_(RLInterface_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Connect_(RLInterface_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RLInterface::Stub::Step(::grpc::ClientContext* context, const ::Actions& request, ::Observation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Step_, context, request, response);
}

void RLInterface::Stub::experimental_async::Step(::grpc::ClientContext* context, const ::Actions* request, ::Observation* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Step_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Observation>* RLInterface::Stub::AsyncStepRaw(::grpc::ClientContext* context, const ::Actions& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Observation>::Create(channel_.get(), cq, rpcmethod_Step_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Observation>* RLInterface::Stub::PrepareAsyncStepRaw(::grpc::ClientContext* context, const ::Actions& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Observation>::Create(channel_.get(), cq, rpcmethod_Step_, context, request, false);
}

::grpc::Status RLInterface::Stub::Reset(::grpc::ClientContext* context, const ::ResetRequest& request, ::Observation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Reset_, context, request, response);
}

void RLInterface::Stub::experimental_async::Reset(::grpc::ClientContext* context, const ::ResetRequest* request, ::Observation* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Reset_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Observation>* RLInterface::Stub::AsyncResetRaw(::grpc::ClientContext* context, const ::ResetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Observation>::Create(channel_.get(), cq, rpcmethod_Reset_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Observation>* RLInterface::Stub::PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::ResetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Observation>::Create(channel_.get(), cq, rpcmethod_Reset_, context, request, false);
}

::grpc::Status RLInterface::Stub::Connect(::grpc::ClientContext* context, const ::ConnectRequest& request, ::Observation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Connect_, context, request, response);
}

void RLInterface::Stub::experimental_async::Connect(::grpc::ClientContext* context, const ::ConnectRequest* request, ::Observation* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Observation>* RLInterface::Stub::AsyncConnectRaw(::grpc::ClientContext* context, const ::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Observation>::Create(channel_.get(), cq, rpcmethod_Connect_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Observation>* RLInterface::Stub::PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Observation>::Create(channel_.get(), cq, rpcmethod_Connect_, context, request, false);
}

RLInterface::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RLInterface_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RLInterface::Service, ::Actions, ::Observation>(
          std::mem_fn(&RLInterface::Service::Step), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RLInterface_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RLInterface::Service, ::ResetRequest, ::Observation>(
          std::mem_fn(&RLInterface::Service::Reset), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RLInterface_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RLInterface::Service, ::ConnectRequest, ::Observation>(
          std::mem_fn(&RLInterface::Service::Connect), this)));
}

RLInterface::Service::~Service() {
}

::grpc::Status RLInterface::Service::Step(::grpc::ServerContext* context, const ::Actions* request, ::Observation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RLInterface::Service::Reset(::grpc::ServerContext* context, const ::ResetRequest* request, ::Observation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RLInterface::Service::Connect(::grpc::ServerContext* context, const ::ConnectRequest* request, ::Observation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


